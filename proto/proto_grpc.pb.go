// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	UnaryGreet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	ServerStreamingGreet(ctx context.Context, in *GreetrRequestList, opts ...grpc.CallOption) (GreetService_ServerStreamingGreetClient, error)
	ClientStreamingGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingGreetClient, error)
	BiDiStreamingGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_BiDiStreamingGreetClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) UnaryGreet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/proto.GreetService/UnaryGreet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) ServerStreamingGreet(ctx context.Context, in *GreetrRequestList, opts ...grpc.CallOption) (GreetService_ServerStreamingGreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/proto.GreetService/ServerStreamingGreet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceServerStreamingGreetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_ServerStreamingGreetClient interface {
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetServiceServerStreamingGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceServerStreamingGreetClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) ClientStreamingGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingGreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/proto.GreetService/ClientStreamingGreet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceClientStreamingGreetClient{stream}
	return x, nil
}

type GreetService_ClientStreamingGreetClient interface {
	Send(*GreetRequest) error
	CloseAndRecv() (*GreetResponseList, error)
	grpc.ClientStream
}

type greetServiceClientStreamingGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceClientStreamingGreetClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceClientStreamingGreetClient) CloseAndRecv() (*GreetResponseList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetResponseList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) BiDiStreamingGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_BiDiStreamingGreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/proto.GreetService/BiDiStreamingGreet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceBiDiStreamingGreetClient{stream}
	return x, nil
}

type GreetService_BiDiStreamingGreetClient interface {
	Send(*GreetRequest) error
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetServiceBiDiStreamingGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceBiDiStreamingGreetClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceBiDiStreamingGreetClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	UnaryGreet(context.Context, *GreetRequest) (*GreetResponse, error)
	ServerStreamingGreet(*GreetrRequestList, GreetService_ServerStreamingGreetServer) error
	ClientStreamingGreet(GreetService_ClientStreamingGreetServer) error
	BiDiStreamingGreet(GreetService_BiDiStreamingGreetServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) UnaryGreet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryGreet not implemented")
}
func (UnimplementedGreetServiceServer) ServerStreamingGreet(*GreetrRequestList, GreetService_ServerStreamingGreetServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingGreet not implemented")
}
func (UnimplementedGreetServiceServer) ClientStreamingGreet(GreetService_ClientStreamingGreetServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingGreet not implemented")
}
func (UnimplementedGreetServiceServer) BiDiStreamingGreet(GreetService_BiDiStreamingGreetServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStreamingGreet not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_UnaryGreet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).UnaryGreet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GreetService/UnaryGreet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).UnaryGreet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_ServerStreamingGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetrRequestList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).ServerStreamingGreet(m, &greetServiceServerStreamingGreetServer{stream})
}

type GreetService_ServerStreamingGreetServer interface {
	Send(*GreetResponse) error
	grpc.ServerStream
}

type greetServiceServerStreamingGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceServerStreamingGreetServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_ClientStreamingGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).ClientStreamingGreet(&greetServiceClientStreamingGreetServer{stream})
}

type GreetService_ClientStreamingGreetServer interface {
	SendAndClose(*GreetResponseList) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetServiceClientStreamingGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceClientStreamingGreetServer) SendAndClose(m *GreetResponseList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceClientStreamingGreetServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_BiDiStreamingGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).BiDiStreamingGreet(&greetServiceBiDiStreamingGreetServer{stream})
}

type GreetService_BiDiStreamingGreetServer interface {
	Send(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetServiceBiDiStreamingGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceBiDiStreamingGreetServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceBiDiStreamingGreetServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryGreet",
			Handler:    _GreetService_UnaryGreet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingGreet",
			Handler:       _GreetService_ServerStreamingGreet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingGreet",
			Handler:       _GreetService_ClientStreamingGreet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDiStreamingGreet",
			Handler:       _GreetService_BiDiStreamingGreet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}
